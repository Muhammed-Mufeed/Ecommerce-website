<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product - Admin Dashboard</title>
    <link rel="stylesheet" href="/admin/css/add-product.css">
    <link rel="stylesheet" href="/admin/css/partial.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <%-include('../partials/admin/header')%>
    
    <div class="add-product-page">
        <div class="header-section">
            <h3>Add New Product</h3>
            <a href="/admin/products" class="back-btn">Back to Products</a>
        </div>

        <form id="productForm" class="product-form" novalidate>
            <div class="form-group">
                <label for="name">Product Name</label>
                <input type="text" id="name" name="name">
                <span class="error" id="nameError"></span>
            </div>

            <div class="form-group">
                <label for="description">Description</label>
                <textarea id="description" name="description"></textarea>
                <span class="error" id="descriptionError"></span>
            </div>
            
            <div class="form-group">
                <label for="category">Category</label>
                <select id="category" name="category" >
                    <option value="">Select Category</option>
                    <% categories.forEach(category => { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                    <% }); %>
                </select>
                <span class="error" id="categoryError"></span>
            </div>

            <div class="form-group">
                <label for="brand">Brand</label>
                <select id="brand" name="brand" >
                    <option value="">Select Brand</option>
                    <% brands.forEach(brand => { %>
                        <option value="<%= brand._id %>"><%= brand.name %></option>
                    <% }); %>
                </select>
                <span class="error" id="brandError"></span>
            </div>

            <div class="form-group">
                <label for="actualPrice">Actual Price (₹)</label>
                <input type="number" id="actualPrice" name="actualPrice" step="1">
                <span class="error" id="actualPriceError"></span>
            </div>
            
            <div class="form-group">
                <label for="offerPercentage">Offer Percentage (%)</label>
                <input type="number" id="offerPercentage" name="offerPercentage" step="1">
                <span class="error" id="offerPercentageError"></span>
            </div>
            
            <div class="form-group">
                <label for="sellingPrice">Selling Price (₹)</label>
                <input type="number" id="sellingPrice" name="sellingPrice" step="1" >
                <span class="error" id="sellingPriceError"></span>
            </div>

            <button type="submit" class="submit-btn" id="submitButton">Add Product</button>
        </form>
    </div>

  <script>
     document.addEventListener('DOMContentLoaded',function(){

       const productForm = document.getElementById('productForm')
       const nameInput = document.getElementById('name')
       const descriptionInput = document.getElementById('description')
       const categorySelect = document.getElementById('category');
       const brandSelect = document.getElementById('brand');
       const actualPriceInput = document.getElementById('actualPrice')
       const sellingPriceInput = document.getElementById('sellingPrice');
       const offerPercentageInput = document.getElementById('offerPercentage');

       //Error Elements
       const nameError = document.getElementById('nameError')
       const descriptionError = document.getElementById('descriptionError')
       const categoryError = document.getElementById('categoryError');
       const brandError = document.getElementById('brandError');
       const actualPriceError = document.getElementById('actualPriceError');
       const sellingPriceError = document.getElementById('sellingPriceError');
       const submitButton = document.getElementById('submitButton');

       
    // Function to calculate selling price based on offer percentage
    function calculateSellingPrice() {
        const actualPrice = parseFloat(actualPriceInput.value);
        const offerPercentage = parseFloat(offerPercentageInput.value);

        if (!isNaN(actualPrice) && !isNaN(offerPercentage) && offerPercentage >= 0) {
            const discountAmount = (actualPrice * offerPercentage) / 100;
            const sellingPrice = actualPrice - discountAmount;
            sellingPriceInput.value = Math.round(sellingPrice) ;
        }
    }

    // Function to calculate offer percentage based on selling price
    function calculateOfferPercentage() {
        const actualPrice = parseFloat(actualPriceInput.value);
        const sellingPrice = parseFloat(sellingPriceInput.value);

        if (!isNaN(actualPrice) && !isNaN(sellingPrice)) {
            const discountAmount = actualPrice - sellingPrice;
            const offerPercentage = (discountAmount / actualPrice) * 100;
            offerPercentageInput.value = Math.round(offerPercentage);
        }
    }

    // Event listeners for dynamic calculation
    actualPriceInput.addEventListener('input', calculateSellingPrice);
    offerPercentageInput.addEventListener('input', calculateSellingPrice);
    sellingPriceInput.addEventListener('input', calculateOfferPercentage);


       //Form submission and validation:
       productForm.addEventListener('submit',async(e)=>{
         e.preventDefault()

         //clear previous error messages
         document.querySelectorAll('.error').forEach(error => error.textContent = '')

         let isValid = true;

         //valdation:
         if (nameInput.value.trim() === ''){
            nameError.textContent = "Product name is required"
            isValid = false
         }else if (nameInput.value.trim().length < 3){
            nameError.textContent = "Product name must be atleast 3 characters" 
            isValid = false
         }


         if(descriptionInput.value.trim() === ''){
            descriptionError.textContent = "Description is required"
            isValid = false;
         }else if(descriptionInput.value.trim().length <10){
            descriptionError.textContent = "Description must be atleast 10 characters"
            isValid = false;
         }

         if (categorySelect.value === '') {
            categoryError.textContent = 'Category is required';
            isValid = false;
         }

         if (brandSelect.value === '') {
            brandError.textContent = 'Brand is required';
            isValid = false;
         }

         if (actualPriceInput.value.trim() === '') {
            actualPriceError.textContent = 'Actual price is required';
            isValid = false;
         }else if (!Number.isInteger(parseFloat(actualPriceInput.value))) {
            actualPriceError.textContent = 'Actual price must be a whole number';
            isValid = false;
         }

         if(offerPercentageInput.value.trim() === ''){
            offerPercentageError.textContent = "Offer Percentage is required"
         }else if (!Number.isInteger(parseFloat(offerPercentageInput.value))) {
            offerPercentageError.textContent = 'Offer percentage must be a whole number';
            isValid = false;
         }
         

         if (sellingPriceInput.value.trim() === '') {
            sellingPriceError.textContent = 'Selling price is required';
            isValid = false;
         }else if (!Number.isInteger(parseFloat(sellingPriceInput.value))) {
            sellingPriceError.textContent = 'Selling price must be a whole number';
            isValid = false;
         }

         

         if(!isValid){
            return ;
         }


         try {
            
            const productData = {
            name: nameInput.value.trim(),
            description: descriptionInput.value.trim(),
            category: categorySelect.value,
            brand: brandSelect.value,
            actualPrice: Math.round( parseFloat(actualPriceInput.value)),
            productDiscount:Math.round(parseFloat(offerPercentageInput.value)) ,
            sellingPrice: Math.round(parseFloat(sellingPriceInput.value)) ,
            };
           

            // Send the data to the server
            const response = await fetch('/admin/products/add',{
                method:'POST',
                headers:{
                    'Content-Type': 'application/json' // Set JSON headers
                },
                body:JSON.stringify(productData) // Convert data to JSON

            })
             
             const data = await response.json()

             if(data.success){
                Swal.fire({
                    icon:'success',
                    title:'Success',
                    text: data.message ||"Product added successfully",
                    confirmButtonText: "OK"
                }).then((result) => {
                    if(result.isConfirmed){
                        window.location.href = `/admin/products`;
                    }
                 })
             }
             else{
                Swal.fire({
                    icon:'error',
                    title:'Error',
                    text: data.message || 'Failed to add product',
                    confirmButtonText: "OK"
                })
             }

         } catch (error) {
            console.error('Error during add product:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while adding the product',
                confirmButtonText: 'OK'
            });
         }

       })

    })
  </script>
</body>
</html>