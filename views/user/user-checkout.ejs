<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/user/css/partial.css">
  <link rel="stylesheet" href="/user/css/user-checkout.css">
  <!-- Add SweetAlert -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <title>Checkout</title>
</head>
<body>
  <%- include('../partials/user/header') %>

  <div class="checkout-container">
    <div class="address-section">
      <h2>Shipping Address</h2>
      <button id="open-modal" class="add-address-link">+ Add New Address</button>

      <!-- Display Existing Addresses -->
      <div class="address-list">
        <% if (addresses.length > 0) { %>
          <% addresses.forEach(address => { %>
            <div class="address-card">
              <input type="radio" name="selectedAddress" value="<%= address._id %>" id="address-<%= address._id %>">
              <label for="address-<%= address._id %>">
                <p><strong><%= address.name %></strong></p>
                <p><%= address.address %>, <%= address.locality %></p>
                <p><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                <p>Mobile: <%= address.mobile %></p>
                <p>Type: <%= address.addressType %></p>
              </label>
            </div>
          <% }) %>
        <% } else { %>
          <p>No addresses found. Please add an address.</p>
        <% } %>
      </div>

      <!-- Payment Options -->
    <div class="payment-section">
      <h2>Payment Options</h2>

      <div class="payment-option cod-option">
        <input type="radio" name="paymentMethod" value="cod" id="cod" <%= subtotal > 5000 ? 'disabled' : 'checked' %>>
        <label for="cod">Cash on Delivery</label>
        <p class="error-message cod-error <%= subtotal > 5000 ? 'visible' : 'hidden' %>">Order above ₹5000 is not eligible for COD</p>
      </div>

      <div class="payment-option">
        <input type="radio" name="paymentMethod" value="online" id="online" <%= subtotal > 5000 ? 'checked' : '' %>>
        <label for="online">Online Payment</label>
      </div>

      <div class="payment-option wallet-option">
        <input type="radio" name="paymentMethod" value="wallet" id="wallet" <%= walletBalance < subtotal ? 'disabled' : '' %>>
        <label for="wallet">Wallet Payment (Balance: ₹<%= walletBalance.toFixed(2) %>)</label>
        <p class="error-message wallet-error <%= walletBalance < subtotal ? 'visible' : 'hidden' %>">Insufficient balance</p>
      </div>
    </div>
   </div>

    <div class="order-summary">
      <h1>Checkout</h1>

      <div class="order-summary-details">
        <h2>Order Summary</h2>
        <div class="order-items">
          <% cartItems.forEach(item => { %>
            <div class="order-item">
              <p><%= item.product.name %> (x<%= item.quantity %>)</p>
              <p>₹<%= item.product.sellingPrice * item.quantity %></p>
            </div>
          <% }) %>
        </div>

        <div class="coupon-section">
          <h3>Apply Coupon</h3>
          <div class="coupon-input-container">
            <input type="text" id="coupon-input" placeholder="Enter code" value="">
            <button id="apply-coupon-btn" class="apply-btn">Apply</button>
          </div>
          <div id="applied-coupon" class="applied-coupon" style="display: none;">
            <span id="applied-coupon-text"></span>
            <button id="remove-coupon-btn" class="remove-btn">Remove</button>
          </div>
          <div id="coupon-error" class="error-message"></div>
        
          <h3>Available Coupons</h3>
          <div class="available-coupons">
            <% if (coupons.length > 0) { %>
              <% coupons.forEach(coupon => { %>
                <div class="coupon-card" data-coupon-code="<%= coupon.couponCode %>" data-discount="<%= coupon.discountAmount %>" data-min-amount="<%= coupon.minPurchaseAmount %>">
                  <div class="coupon-details">
                    <span class="coupon-code"><%= coupon.couponCode %></span>
                    <p class="coupon-discount">Get Instant Discount ₹<%= coupon.discountAmount %></p>
                    <p class="coupon-min-amount">Valid on orders above ₹<%= coupon.minPurchaseAmount %></p>
                  </div>
                  <button class="apply-coupon-card-btn apply-btn">Apply</button>
                </div>
              <% }) %>
            <% } else { %>
              <p>No coupons available.</p>
            <% } %>
          </div>
        </div>

        <div class="order-total">
          <p><span>Subtotal:</span> <span id="subtotal">₹<%= subtotal %></span></p>
          <p><span>Coupon Applied:</span> <span id="discount">₹0</span></p>
          <p>
            <span>Delivery Charge:</span>
            <span id="delivery-charge">
              <% if (subtotal < 1000) { %>
                ₹99
              <% } else { %>
                <s>₹99</s> Free
              <% } %>
            </span>
          </p>
          <p><strong>Total:</strong> <span id="total">₹<%= subtotal + (subtotal < 1000 ? 99 : 0) %></span></p>
        </div>

        <button id="place-order-btn" class="place-order-btn">Place Order</button>
      </div>
    </div>
  </div>

  <!-- Add Address Modal -->
  <div id="addAddressModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>Add New Address</h2>
      <form id="modal-add-address-form">
        <div class="form-group">
          <label for="modal-name">Name</label>
          <input type="text" id="modal-name" name="name" >
          <div id="modal-name-error" class="error-message"></div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="modal-pincode">Pincode</label>
            <input type="text" id="modal-pincode" name="pincode" >
            <div id="modal-pincode-error" class="error-message"></div>
          </div>
          <div class="form-group">
            <label for="modal-mobile">Mobile</label>
            <input type="tel" id="modal-mobile" name="mobile" >
            <div id="modal-mobile-error" class="error-message"></div>
          </div>
        </div>

        <div class="form-group">
          <label for="modal-locality">Locality</label>
          <input type="text" id="modal-locality" name="locality" >
          <div id="modal-locality-error" class="error-message"></div>
        </div>

        <div class="form-group">
          <label for="modal-address">Address</label>
          <input type="text" id="modal-address" name="address" >
          <div id="modal-address-error" class="error-message"></div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="modal-city">City</label>
            <input type="text" id="modal-city" name="city" >
            <div id="modal-city-error" class="error-message"></div>
          </div>
          <div class="form-group">
            <label for="modal-state">State</label>
            <input type="text" id="modal-state" name="state" >
            <div id="modal-state-error" class="error-message"></div>
          </div>
        </div>

        <div class="form-group">
          <label for="modal-addressType">Address Type</label>
          <select id="modal-addressType" name="addressType" >
            <option value="Home">Home</option>
            <option value="Work">Work</option>
          </select>
        </div>

        <button type="submit">Save Address</button>
      </form>
    </div>
  </div>

   <%- include('../partials/user/footer') %>

  <script>
  
    // Open Modal
    document.getElementById('open-modal').addEventListener('click', function (event) {
      event.preventDefault();
      document.getElementById('addAddressModal').style.display = 'block';
    });

    // Close Modal
    document.querySelector('.close').addEventListener('click', function () {
      document.getElementById('addAddressModal').style.display = 'none';
    });

    // Close Modal when clicking outside
    window.addEventListener('click', function (event) {
      if (event.target === document.getElementById('addAddressModal')) {
        document.getElementById('addAddressModal').style.display = 'none';
      }
    });

    document.getElementById('addAddressModal').style.display = 'none';


    document.getElementById('modal-add-address-form').addEventListener('submit', async function (event) {
      event.preventDefault();

      document.querySelectorAll('.error-message').forEach(error => error.textContent = '');

      let isValid = true;

      const name = document.getElementById('modal-name').value.trim();
      const pincode = document.getElementById('modal-pincode').value.trim();
      const mobile = document.getElementById('modal-mobile').value.trim();
      const locality = document.getElementById('modal-locality').value.trim();
      const address = document.getElementById('modal-address').value.trim();
      const city = document.getElementById('modal-city').value.trim();
      const state = document.getElementById('modal-state').value.trim();

      if (name === '') {
        document.getElementById('modal-name-error').textContent = 'Name is required.';
        isValid = false;
      }

      if (pincode === '') {
        document.getElementById('modal-pincode-error').textContent = 'Pincode is required.';
        isValid = false;
      } else if (!/^\d{6}$/.test(pincode)) {
        document.getElementById('modal-pincode-error').textContent = 'Pincode must be 6 digits.';
        isValid = false;
      }

      if (mobile === '') {
        document.getElementById('modal-mobile-error').textContent = 'Mobile is required.';
        isValid = false;
      } else if (!/^\d{10}$/.test(mobile)) {
        document.getElementById('modal-mobile-error').textContent = 'Mobile must be 10 digits.';
        isValid = false;
      }

      if (locality === '') {
        document.getElementById('modal-locality-error').textContent = 'Locality is required.';
        isValid = false;
      }

      if (address === '') {
        document.getElementById('modal-address-error').textContent = 'Address is required.';
        isValid = false;
      }

      if (city === '') {
        document.getElementById('modal-city-error').textContent = 'City is required.';
        isValid = false;
      }

      if (state === '') {
        document.getElementById('modal-state-error').textContent = 'State is required.';
        isValid = false;
      }

      // If all fields are valid, submit the form
      if (isValid) {
        const formData = {
          name,
          pincode,
          mobile,
          locality,
          address,
          city,
          state,
          addressType: document.getElementById('modal-addressType').value,
        };

        try {
          const response = await fetch('/Checkout_addAddress', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData),
          });

          const data = await response.json();

          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success!',
              text: 'Address added successfully.',
              confirmButtonText: 'OK',
            }).then(() => {
              document.getElementById('addAddressModal').style.display = 'none';
              location.reload(); // Refresh the page to update the address list
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Failed to add address.',
              confirmButtonText: 'OK',
            });
          }
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong. Please try again.',
            confirmButtonText: 'OK',
          });
        }
      }
    });


    const couponInput = document.getElementById('coupon-input');
    const applyCouponBtn = document.getElementById('apply-coupon-btn');
    const appliedCouponSection = document.getElementById('applied-coupon');
    const appliedCouponText = document.getElementById('applied-coupon-text');
    const removeCouponBtn = document.getElementById('remove-coupon-btn');
    const couponError = document.getElementById('coupon-error');

    const subtotalVal = document.getElementById('subtotal');
    const discountVal = document.getElementById('discount');
    const totalVal = document.getElementById('total');
    const subtotal = parseInt('<%= subtotal %>');
    const walletBalance = parseFloat('<%= walletBalance %>');

    let selectedCoupon = null;
    let selectedDiscount = 0;


    function updateOrderTotals(subtotal, discount) {
    const deliveryCharge = subtotal < 1000 ? 99 : 0;
    const total = Math.max(subtotal - discount + deliveryCharge, 0);

    // Update UI
    discountVal.textContent = `-₹${discount}`;
    totalVal.textContent = `₹${total}`;
    document.getElementById('delivery-charge').innerHTML = subtotal < 1000 ? '₹99' : '<s>₹99</s> Free';

    // Update COD availability
    updateCODAvailability(total);

    // Update wallet availability
    const walletRadio = document.getElementById('wallet');
    const walletError = document.querySelector('.wallet-error');
    if (total > walletBalance) {
      walletRadio.disabled = true;
      walletError.classList.remove('hidden');
      walletError.classList.add('visible');
    } else {
      walletRadio.disabled = false;
      walletError.classList.remove('visible');
      walletError.classList.add('hidden');
    }
  }
    // Function to apply a coupon
    function applyCoupon(couponCode, discount, minAmount) {
        couponError.textContent = '';

        // Validate minimum purchase amount
        if (subtotal < minAmount) {
          couponError.textContent = `Minimum purchase amount for this coupon is ₹${minAmount}`;
          return false;
        }

        // Update UI
        selectedCoupon = couponCode;
        selectedDiscount = discount;

        // Set the coupon code in the input field
        couponInput.value = couponCode;

        // Show applied coupon section
        appliedCouponText.textContent = `Applied: ${couponCode} (-₹${discount} off)`;
        appliedCouponSection.style.display = 'flex';

        // Update all "Apply" buttons to "Applied"
        document.querySelectorAll('.apply-btn').forEach(btn => {
          if (btn.closest('.coupon-card')?.dataset.couponCode === couponCode || btn === applyCouponBtn) {
            btn.textContent = 'Applied';
            btn.classList.add('applied');
            btn.disabled = true;
          }
      });

      // Update order totals
      updateOrderTotals(subtotal, discount);

      return true;
    }

        // Function to remove a coupon
    function removeCoupon() {
      selectedCoupon = null;
      selectedDiscount = 0;

      // Reset UI
      couponInput.value = '';
      appliedCouponSection.style.display = 'none';
      couponError.textContent = '';

      // Reset all "Applied" buttons to "Apply"
      document.querySelectorAll('.apply-btn').forEach(btn => {
        btn.textContent = 'Apply';
        btn.classList.remove('applied');
        btn.disabled = false;
      });

      // Update order totals
      updateOrderTotals(subtotal, 0);
    }

    // Apply coupon from input field
    applyCouponBtn.addEventListener('click', () => {
      const couponCode = couponInput.value.trim().toUpperCase();
      if (!couponCode) {
        couponError.textContent = 'Please enter a coupon code.';
        return;
      }

      // Find the coupon in the available coupons
      const couponCard = document.querySelector(`.coupon-card[data-coupon-code="${couponCode}"]`);
      if (!couponCard) {
        couponError.textContent = 'Invalid coupon code.';
        return;
      }

      const discount = parseInt(couponCard.dataset.discount);
      const minAmount = parseInt(couponCard.dataset.minAmount);

      applyCoupon(couponCode, discount, minAmount);
    });

    // Apply coupon from available coupons
    document.querySelectorAll('.apply-coupon-card-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const couponCard = btn.closest('.coupon-card');
        const couponCode = couponCard.dataset.couponCode;
        const discount = parseInt(couponCard.dataset.discount);
        const minAmount = parseInt(couponCard.dataset.minAmount);

        applyCoupon(couponCode, discount, minAmount);
      });
    });

    // Remove coupon
    removeCouponBtn.addEventListener('click', () => {
      removeCoupon();
    });



   // Place Order Button
    document.getElementById('place-order-btn').addEventListener('click', async () => {
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

    if (!selectedAddress) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Please select a shipping address.',
        confirmButtonText: 'OK',
      });
      return;
    }

    if (!selectedPaymentMethod) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Please select a payment method.',
        confirmButtonText: 'OK',
      });
      return;
    }

    const orderData = {
      addressId: selectedAddress.value,
      paymentMethod: selectedPaymentMethod.value,
      couponCode: selectedCoupon || '',
    };

    try {
      const response = await fetch('/checkout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData),
      });
      const data = await response.json();

      if (data.success) {

          if (selectedPaymentMethod.value === 'online' && data.orderId) {
              // Store mongoOrderId in a variable
              const mongoOrderId = data.mongoOrderId;

              const options = {
                key: '<%= process.env.RAZORPAY_KEY_ID %>',
                amount: data.finalAmount * 100,
                currency: 'INR',
                name: 'PackSmart',
                description: 'Test Transaction',
                order_id: data.orderId,
                handler: async function (response) {
                  const paymentData = {
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                  };

                  const verifyResponse = await fetch('/verify-Onlinepayment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(paymentData),
                  });
                  const verifyData = await verifyResponse.json();

                  if (verifyData.success) {
                    window.location.href = verifyData.redirectUrl; // Success redirect
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Payment Failed',
                      text: verifyData.message || 'Payment verification failed.',
                      confirmButtonText: 'OK',
                    }).then(() => {
                      window.location.href = verifyData.redirectUrl; // Redirect to order details on verification failure
                    });
                  }
                },
                prefill: {
                  name: '<%= user.name %>',
                  email: '<%= user.email %>',
                  contact: '<%= user.mobile %>',
                },
                theme: {
                  color: '#F37254',
                },
                modal: {
                  ondismiss: async function () {
                    // Handle popup closure using the captured mongoOrderId
                    await fetch('/payment-failed', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ orderId: mongoOrderId }),
                    });
                    window.location.href = `/userOrders/${mongoOrderId}`;
                  },
                },
              };

              const rzp = new Razorpay(options);
              rzp.on('payment.failed', async function (response) {
                // Handle payment failure (e.g., invalid card) using the captured mongoOrderId
                await fetch('/payment-failed', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ orderId: mongoOrderId }),
                });
                Swal.fire({
                  icon: 'error',
                  title: 'Payment Failed',
                  text: response.error.description || 'Payment failed. Please try again.',
                  confirmButtonText: 'OK',
                }).then(() => {
                  window.location.href = `/userOrders/${mongoOrderId}`;
                });
              });
              rzp.open();

          } else {

              window.location.href = data.redirectUrl; // COD redirect
              
          }
          
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'Failed to place order.',
          confirmButtonText: 'OK',
        });
      }
    } catch (error) {
      console.error('Error during order placement', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Something went wrong. Please try again.',
        confirmButtonText: 'OK',
      });
    }
  });

 
  // Initial check on page load
  document.addEventListener('DOMContentLoaded', () => {
    updateOrderTotals(subtotal, 0);
  });
</script>