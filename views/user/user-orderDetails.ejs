<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details - PackSmart</title>
  <link rel="stylesheet" href="/user/css/profile-sidebar.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <style>
    .wrapper {
      display: flex;
      min-height: calc(100vh - 80px);
    }

    .main-content {
      flex: 1;
      padding: 40px 20px;
    }

    .order-details-container {
      max-width: 1200px;
      margin: 0 auto;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
      padding: 30px;
    }

    /* Error Message Styling */
    .error-message {
      background-color: #f8d7da;
      color: #721c24;
      padding: 15px 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 15px;
      border-left: 5px solid #dc3545;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .error-message i {
      font-size: 20px;
    }

    .error-message p {
      margin: 0;
      font-size: 16px;
      font-weight: 500;
      flex: 1;
    }

    .error-message .btn-retry {
      background-color: #dc3545;
      color: #fff;
      padding: 8px 20px;
      border-radius: 5px;
      font-size: 14px;
      font-weight: 500;
      text-decoration: none;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .error-message .btn-retry:hover {
      background-color: #c82333;
      transform: translateY(-2px);
    }

    .order-header {
      border-bottom: 1px solid #e0e0e0;
      padding-bottom: 20px;
      margin-bottom: 30px;
    }

    .order-header h2 {
      font-size: 26px;
      font-weight: 600;
      color: #1a1a1a;
    }

    .order-meta {
      display: flex;
      justify-content: space-between;
      font-size: 14px;
      color: #666;
      margin-top: 10px;
    }

    .order-section {
      margin-bottom: 40px;
    }

    .section-title {
      font-size: 20px;
      font-weight: 600;
      color: #333;
      margin-bottom: 20px;
      padding-bottom: 5px;
      border-bottom: 2px solid #007bff;
      display: inline-block;
    }

    .order-items {
      display: grid;
      gap: 25px;
    }

    .item {
      background-color: #fafafa;
      border: 1px solid #e8e8e8;
      border-radius: 8px;
      padding: 20px;
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
    }

    .item-image {
      width: 120px;
      height: 120px;
      object-fit: contain;
      border-radius: 5px;
      margin-right: 20px;
      border: 1px solid #ddd;
    }

    .item-info {
      flex: 1;
      min-width: 250px;
    }

    .item-name {
      font-size: 18px;
      font-weight: 500;
      color: #222;
      margin-bottom: 8px;
    }

    .item-detail {
      font-size: 14px;
      color: #555;
      margin-bottom: 5px;
    }

    .tracking-timeline {
      margin-top: 20px;
      position: relative;
      padding-left: 30px;
    }

    .timeline-step {
      position: relative;
      margin-bottom: 20px;
    }

    .timeline-step:last-child {
      margin-bottom: 0;
    }

    .timeline-step::before {
      content: '';
      position: absolute;
      left: -25px;
      top: 0;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background-color: #ccc;
      z-index: 1;
    }

    .timeline-step::after {
      content: '';
      position: absolute;
      left: -21px;
      top: 10px;
      width: 2px;
      height: calc(100% - 10px);
      background-color: #ccc;
    }

    .timeline-step:last-child::after {
      display: none;
    }

    .timeline-step.active::before {
      background-color: #28a745;
    }

    .timeline-step.active::after {
      background-color: #28a745;
    }

    .timeline-label {
      font-size: 14px;
      font-weight: 500;
      color: #333;
    }

    .timeline-date {
      font-size: 12px;
      color: #777;
    }

    .item-actions {
      margin-left: auto;
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .btn {
      padding: 10px 20px;
      border-radius: 5px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      border: none;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .btn-cancel {
      background-color: #dc3545;
      color: #fff;
    }

    .btn-cancel:hover {
      background-color: #c82333;
      transform: translateY(-2px);
    }

    .btn-return {
      background-color: #007bff;
      color: #fff;
    }

    .btn-return:hover {
      background-color: #0069d9;
      transform: translateY(-2px);
    }

    .order-summary {
      display: flex;
      flex-wrap: wrap;
      gap: 30px;
      background-color: #f9f9f9;
      padding: 25px;
      border-radius: 8px;
    }

    .summary-box {
      flex: 1;
      min-width: 280px;
    }

    .summary-text {
      font-size: 14px;
      color: #444;
      line-height: 1.8;
    }

    .status-badge {
      padding: 5px 10px;
      border-radius: 15px;
      font-size: 12px;
      font-weight: 500;
      text-transform: uppercase;
      display: inline-block;
      margin-top: 5px;
    }

    .status-pending { background-color: #fff3cd; color: #856404; }
    .status-confirmed { background-color: #cce5ff; color: #004085; }
    .status-shipped { background-color: #b8e994; color: #19692c; }
    .status-delivered { background-color: #c3e6cb; color: #155724; }
    .status-cancelled { background-color: #f8d7da; color: #721c24; }
    .status-requested { background-color: #fbd38d; color: #7b341e; }
    .status-approved { background-color: #d4b9ff; color: #4a0072; }
    .status-rejected { background-color: #e6e6e6; color: #5a3e36; }
    .status-returned { background-color: #f4e7c3; color: #6c5100; }
    .status-paid { background-color: #c3e6cb; color: #155724; }
    .status-failed { background-color: #f8d7da; color: #721c24; }
    .status-pending-payment { background-color: #fff3cd; color: #856404; }

      /* Existing SweetAlert2 custom styles (update these) */
.swal2-select,
.swal2-input#custom-reason {
  width: 100%;
  padding: 10px;
  border-radius: 5px;
  border: 1px solid #e0e0e0;
  font-size: 14px;
  color: #333;
  background-color: #fafafa;
  margin-top: 10px;
  margin-left: auto;
}

.swal2-select:focus,
.swal2-input#custom-reason:focus {
  border-color: #007bff;
  outline: none;
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
}

/* Hide custom input by default */
.swal2-input#custom-reason {
  display: none; /* Ensure it's hidden initially */
}

/* Style the modal container */
.swal2-popup {
  border-radius: 10px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  padding: 20px;
  font-family: inherit; /* Match your site's font */
}

/* Style the title */
.swal2-title {
  font-size: 26px;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 20px;
}

/* Style the label */
.swal2-label {
  font-size: 14px;
  color: #666;
  margin-bottom: 5px;
  font-weight: 500;
}

/* Style the buttons */
.swal2-confirm,
.swal2-cancel {
  padding: 10px 20px;
  border-radius: 5px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  border: none;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.swal2-confirm {
  background-color: #007bff;
  color: #fff;
}

.swal2-confirm:hover {
  background-color: #0069d9;
  transform: translateY(-2px);
}

.swal2-cancel {
  background-color: #dc3545;
  color: #fff;
  margin-left: 10px;
}

.swal2-cancel:hover {
  background-color: #c82333;
  transform: translateY(-2px);
}

/* Ensure proper spacing and alignment */
.swal2-content {
  margin: 0;
  padding: 0;
}

.swal2-html-container {
  margin: 10px 0;
}

.btn-download-invoice {
    background-color: #28a745;
    color: #fff;
 }
.btn-download-invoice:hover {
  background-color: #218838;
  transform: translateY(-2px);
}

    @media (max-width: 768px) {
      .main-content {
        padding: 20px 10px;
      }
      .item {
        flex-direction: column;
        align-items: flex-start;
      }
      .item-image {
        margin-bottom: 15px;
      }
      .item-actions {
        margin-left: 0;
        margin-top: 15px;
        width: 100%;
        flex-direction: column;
      }
      .btn {
        width: 100%;
      }
      .order-summary {
        flex-direction: column;
        gap: 20px;
      }
      .error-message {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }
      .error-message .btn-retry {
        width: 100%;
        text-align: center;
      }
    }
  </style>
</head>
<body>
  <%- include('../partials/user/profile-sidebar-header') %>

  <div class="wrapper">
    <div class="main-content">
      <div class="order-details-container">

        <!-- Invoice Download Button -->
      <div style="margin-bottom: 20px; text-align: right;">
        <button class="btn btn-download-invoice" onclick="downloadInvoice('<%= order.orderId %>')">
          <i class="fas fa-download"></i> Download Invoice
        </button>
      </div>
        <!-- Error Message for Failed Payment -->
        <% if (order.paymentMethod === 'online' && order.paymentStatus === 'Failed') { %>
          <div class="error-message">
            <i class="fas fa-exclamation-circle"></i>
            <p>Payment Failed! Your order cannot be processed until payment is completed.</p>
            <a href="#" class="btn-retry" onclick="retryPayment('<%= order.orderId %>', '<%= order.finalAmount %>', '<%= order.paymentDetails.razorpayOrderId %>')">Retry Payment</a>
          </div>
        <% } %>

        <div class="order-header">
          <h2>Order Details - #<%= order.orderId %></h2>
          <div class="order-meta">
            <span>Placed on: <%= new Date(order.createdAt).toLocaleDateString('en-US', { day: '2-digit', month: 'short', year: 'numeric' }) %></span>
            <span>Total: ₹<%= order.finalAmount.toFixed(2) %></span>
          </div>
        </div>

        <!-- Items Section -->
        <div class="order-section">
          <div class="section-title">Items</div>
          <div class="order-items">
            <% order.items.forEach(item => { %>
              <div class="item">
                <img class="item-image" src="<%= item.variant.images[0] || '/images/placeholder.jpg' %>" alt="<%= item.product.name %>">
                <div class="item-info">
                  <div class="item-name"><%= item.product.name %></div>
                  <div class="item-detail">Color: <%= item.variant.colorName %></div>
                  <div class="item-detail">Quantity: <%= item.quantity %></div>
                  <div class="item-detail">Price: ₹<%= item.product.soldPrice.toFixed(2) %></div>
                  <span class="status-badge status-<%= item.status.toLowerCase() %>"><%= item.status %></span>
                  <% if (item.cancellationReason) { %>
                    <div class="item-detail">Cancellation Reason: <%= item.cancellationReason %></div>
                  <% } %>
                  <% if (item.return && item.return.status) { %>
                    <div class="item-detail">
                      <span class="status-badge status-<%= item.return.status.toLowerCase() %>">Return: <%= item.return.status %></span>
                    </div>
                    <div class="item-detail">Return Reason: <%= item.return.reason %></div>
                    <% if (item.return.requestedAt) { %>
                      <div class="item-detail">Requested: <%= new Date(item.return.requestedAt).toLocaleDateString('en-US', { day: '2-digit', month: 'short', year: 'numeric' }) %></div>
                    <% } %>
                    <% if (item.return.approvedAt) { %>
                      <div class="item-detail">Approved: <%= new Date(item.return.approvedAt).toLocaleDateString('en-US', { day: '2-digit', month: 'short', year: 'numeric' }) %></div>
                    <% } %>
                  <% } %>

                  <!-- Tracking Timeline -->
                  <div class="tracking-timeline">
                    <% const statuses = ['Pending', 'Confirmed', 'Shipped', 'Delivered']; %>
                    <% let currentIndex = statuses.indexOf(item.status); %>
                    <% statuses.forEach((status, index) => { %>
                      <div class="timeline-step <%= index <= currentIndex && item.status !== 'Cancelled' ? 'active' : '' %>">
                        <div class="timeline-label"><%= status %></div>
                        <div class="timeline-date">
                          <%= index <= currentIndex && item.status !== 'Cancelled' ? (status === 'Delivered' && item.status === 'Delivered' ? new Date().toLocaleDateString('en-US', { day: '2-digit', month: 'short' }) : new Date(order.createdAt).toLocaleDateString('en-US', { day: '2-digit', month: 'short' })) : 'Pending' %>
                        </div>
                      </div>
                    <% }) %>
                  </div>
                </div>
                <div class="item-actions">
                  <% if (order.paymentMethod === 'cod' || order.paymentMethod === 'online' || order.paymentMethod === 'wallet') { %>
                    <% if (item.status !== 'Delivered' && item.status !== 'Cancelled' && item.status !== 'Returned') { %>
                      <button class="btn btn-cancel" onclick="cancelItem('<%= order._id %>', '<%= item._id %>')">Cancel Item</button>
                    <% } else if (item.status === 'Delivered' && (!item.return || (item.return.status !== 'Requested' && item.return.status !== 'Approved' && item.return.status !== 'Rejected'))) { %>
                      <button class="btn btn-return" onclick="requestReturn('<%= order._id %>', '<%= item._id %>')">Request Return</button>
                    <% } %>
                  <% } %>
                </div>
              </div>
            <% }) %>
          </div>
        </div>

        <!-- Order Summary Section -->
        <div class="order-section">
          <div class="section-title">Order Summary</div>
          <div class="order-summary">
            <div class="summary-box">
              <div class="section-title">Shipping Address</div>
              <div class="summary-text">
                <%= order.address.name %><br>
                <%= order.address.address %>, <%= order.address.locality %><br>
                <%= order.address.city %>, <%= order.address.state %> - <%= order.address.pincode %><br>
                Phone: <%= order.address.mobile %><br>
                Type: <%= order.address.addressType %>
              </div>
            </div>
            <div class="summary-box">
              <div class="section-title">Payment Details</div>
              <div class="summary-text">
                Method: <%= order.paymentMethod === 'cod' ? 'Cash on Delivery' : 'Online' %><br>
                Status: <span class="status-badge status-<%= order.paymentStatus.toLowerCase().replace(' ', '-') %>"><%= order.paymentStatus %></span><br>
                Delivery charge: ₹<%= order.deliveryCharge.toFixed(2) %><br>
                Final Amount: ₹<%= order.finalAmount.toFixed(2) %><br>
                <% if (order.coupon.couponCode) { %>
                  Coupon: <%= order.coupon.couponCode %> (Discount: ₹<%= order.coupon.discountAmount.toFixed(2) %>)<br>
                <% } %>
                <% if (order.paymentMethod === 'online' && order.paymentDetails) { %>
                  Razorpay Order ID: <%= order.paymentDetails.razorpayOrderId || 'N/A' %><br>
                  Payment ID: <%= order.paymentDetails.razorpayPaymentId || 'N/A' %>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
      async function cancelItem(orderId, itemId) {
      const { value: reason } = await Swal.fire({
        title: 'Cancel Item',
        input: 'select',
        inputOptions: {
          '': 'Select a reason...',
          'Changed my mind': 'Changed my mind',
          'Found a better price elsewhere': 'Found a better price elsewhere',
          'Ordered by mistake': 'Ordered by mistake',
          'Shipping takes too long': 'Shipping takes too long',
          'Other': 'Other reasons '
        },
        inputAttributes: {
          required: true
        },
        inputLabel: 'Reason for cancellation',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) {
            return 'Please select a reason!';
          }
        },
        // Add custom HTML for the text input
        html: `
          <input id="custom-reason" class="swal2-input" placeholder="Enter your reason here..." style="display: none; margin-top: 10px;">
        `,
        didOpen: () => {
          const select = Swal.getInput();
          const customInput = document.getElementById('custom-reason');
          select.addEventListener('change', (e) => {
            customInput.style.display = e.target.value === 'Other' ? 'block' : 'none';
          });
        },
        preConfirm: () => {
          const selectValue = Swal.getInput().value;
          const customReason = document.getElementById('custom-reason').value;
          if (selectValue === 'Other' && !customReason.trim()) {
            Swal.showValidationMessage('Please enter your other reason');
            return false;
          }
          return selectValue === 'Other' ? customReason : selectValue;
        }
      });

      if (reason) {
        const response = await fetch(`/userOrders/${orderId}/cancelItem/${itemId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ reason })
        });
        const data = await response.json();
        if (data.success) {
          Swal.fire('Success', data.message, 'success').then(() => location.reload());
        } else {
          Swal.fire('Error', data.message, 'error');
        }
      }
    }

    async function requestReturn(orderId, itemId) {
      const { value: reason } = await Swal.fire({
        title: 'Request Return',
        input: 'select',
        inputOptions: {
          '': 'Select a reason...',
          'Defective product': 'Defective product',
          'Wrong item received': 'Wrong item received',
          'Not as described': 'Not as described',
          'Changed my mind': 'Changed my mind',
          'Other': 'Other reasons'
        },
        inputAttributes: {
          required: true
        },
        inputLabel: 'Reason for return',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) {
            return 'Please select a reason!';
          }
        },
        // Add custom HTML for the text input
        html: `
          <input id="custom-reason" class="swal2-input" placeholder="Enter your reason here..." style="display: none; margin-top: 10px;">
        `,
        didOpen: () => {
          const select = Swal.getInput();
          const customInput = document.getElementById('custom-reason');
          select.addEventListener('change', (e) => {
            customInput.style.display = e.target.value === 'Other' ? 'block' : 'none';
          });
        },
        preConfirm: () => {
          const selectValue = Swal.getInput().value;
          const customReason = document.getElementById('custom-reason').value;
          if (selectValue === 'Other' && !customReason.trim()) {
            Swal.showValidationMessage('Please enter your Other reason');
            return false;
          }
          return selectValue === 'Other' ? customReason : selectValue;
        }
      });

      if (reason) {
        const response = await fetch(`/userOrders/${orderId}/returnItem/${itemId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ reason })
        });
        const data = await response.json();
        if (data.success) {
          Swal.fire('Success', data.message, 'success').then(() => location.reload());
        } else {
          Swal.fire('Error', data.message, 'error');
        }
      }
    }

    function retryPayment(orderId, amount, razorpayOrderId) {
      fetch('/retry-payment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId }),
      })
        .then((res) => res.json())
        .then((data) => {
          if (data.success) {
            const options = {
              key: '<%= process.env.RAZORPAY_KEY_ID %>',
              amount: data.finalAmount * 100,
              currency: 'INR',
              name: 'PackSmart',
              description: 'Retry Payment for Order #' + orderId,
              order_id: data.orderId, // New Razorpay order ID from postRetryPayment
              handler: function (response) {
                fetch('/verify-Onlinepayment', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                  }),
                })
                  .then((res) => res.json())
                  .then((data) => {
                    if (data.success) {
                      Swal.fire('Success', 'Payment successful!', 'success').then(() => {
                        window.location.href = `/orderSuccess/${orderId}`;
                      });
                    } else {
                      Swal.fire('Error', data.message || 'Payment retry failed.', 'error').then(() => {
                        window.location.reload(); // Stay on details page
                      });
                    }
                  });
              },
              prefill: {
                name: '<%= user.name %>' || 'Customer',
                email: '<%= user.email %>' || '',
              },
              theme: {
                color: '#007bff',
              },
              modal: {
                ondismiss: function () {
                  Swal.fire({
                    icon: 'info',
                    title: 'Payment Cancelled',
                    text: 'You closed the payment window. Please retry if needed.',
                    confirmButtonText: 'OK',
                  });
                },
              },
            };

            const rzp = new Razorpay(options);
            rzp.on('payment.failed', function (response) {
              Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: response.error.description || 'Retry attempt failed. Please try again.',
                confirmButtonText: 'OK',
              });
            });
            rzp.open();
          } else {
            Swal.fire('Error', data.message, 'error');
          }
        })
        .catch((error) => {
          console.error('Error initiating retry payment:', error);
          Swal.fire('Error', 'Failed to initiate payment retry.', 'error');
        });
    }

    function downloadInvoice(orderId) {
    window.location.href = `/userOrders/download-invoice/${orderId}`;
  }
  </script>

  <%- include('../partials/user/profile-sidebar-footer') %>
</body>
</html>