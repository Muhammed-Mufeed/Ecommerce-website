<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Verify OTP</title>
  <!-- Basic CSS styling-->
   <link rel="stylesheet" href="/user/css/signup.css">
  <!-- Bootstrap CSS for styling -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- SweetAlert2 for alerts -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>
<body>
  <div class="card p-4" style="width: 400px;">
    <h3 class="text-center mb-3">Verify OTP</h3>
    <!-- OTP Verification Form -->
    <form id="verifyOtpForm">
      <div class="mb-3">
        <label for="otp" class="form-label">Enter OTP</label>
        <input type="text" class="form-control" id="otp" placeholder="6-digit OTP" required>
      </div>
      <button type="submit" class="btn btn-primary w-100">Verify OTP</button>
    </form>
    <hr>
    <!-- Timer display -->
    <div class="timer" id="timer">Resend OTP in 30 seconds</div>
    <!-- Resend OTP button -->
    <button id="resendOtpButton" class="btn btn-secondary w-100 mt-2" disabled>Resend OTP</button>
  </div>
    <script>
    // Timer logic for the Resend OTP button
    let timerDuration = 30; // Timer duration in seconds
    let timerElement = document.getElementById("timer"); // Timer display element
    let resendButton = document.getElementById("resendOtpButton"); // Resend button element
    let resendAllowed = false; // Flag to track if resend is allowed

    function startTimer() {
      // Disable the resend button and reset the flag
      resendButton.disabled = true;
      resendAllowed = false;
      let remainingTime = timerDuration; // Initialize remaining time

      // Start countdown timer
      const timerInterval = setInterval(() => {
        if (remainingTime > 0) {
          // Update the timer text
          timerElement.textContent = `Resend OTP in ${remainingTime--} seconds`;
          timerElement.style.color = "#007bff"; // Set color to blue during countdown
        } else {
          // Timer ends
          clearInterval(timerInterval);
          timerElement.textContent = "You can now resend the OTP.";
          timerElement.style.color = "#28a745"; // Set color to green when done
          resendButton.disabled = false; // Enable the resend button
          resendAllowed = true; // Allow one resend after timer ends
        }
      }, 1000); // Update every second
    }

    // Start the timer on page load
    startTimer();

    // Event listener for OTP verification form submission
    document.getElementById("verifyOtpForm").addEventListener("submit", async function (e) {
      e.preventDefault(); // Prevent default form submission behavior
      const otp = document.getElementById("otp").value; // Get the entered OTP

      try {
        // Send POST request to verify OTP
        const response = await fetch("/verify-otp", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ otp }), // Send OTP as JSON
        });

        const data = await response.json(); // Parse JSON response

        if (data.success) {
          // Show success alert if OTP is verified
          Swal.fire({
            icon: "success",
            title: "OTP Verified!",
            text: data.message || "Redirecting to login...",
          }).then(() => {
            // Redirect to the given URL or default to "/login"
            window.location.href = data.redirectUrl || "/login";
          });
        } else {
          // Show error alert if OTP verification fails
          Swal.fire({
            icon: "error",
            title: "Verification Failed",
            text: data.message || "Please try again.",
          });
        }
      } catch (error) {
        // Handle errors during the request
        console.error("Error verifying OTP:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Something went wrong. Please try again.",
        });
      }
    });

    // Event listener for Resend OTP button
    resendButton.addEventListener("click", async function () {
      if (!resendAllowed) return; // Do nothing if resend is not allowed

      resendAllowed = false; // Reset flag to prevent multiple clicks
      resendButton.disabled = true; // Disable button after click
      timerElement.textContent = "Processing..."; // Show processing status
      timerElement.style.color = "#ffc107"; // Set color to yellow for processing

      try {
        // Send POST request to resend OTP
        const response = await fetch("/resend-otp", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const data = await response.json(); // Parse JSON response

        if (data.success) {
          // Show success alert if OTP is resent
          Swal.fire({
            icon: "success",
            title: "OTP Sent!",
            text: data.message || "Check your email for the OTP.",
          });
          startTimer(); // Restart the timer after resending OTP
        } else {
          // Show error alert if resending OTP fails
          Swal.fire({
            icon: "error",
            title: "Failed to Resend OTP",
            text: data.message || "Please try again later.",
          });
          // Reset timer text and enable button
          timerElement.textContent = "You can now resend the OTP.";
          timerElement.style.color = "#28a745";
          resendButton.disabled = false;
          resendAllowed = true; // Allow resend again
        }
      } catch (error) {
        // Handle errors during the request
        console.error("Error resending OTP:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Something went wrong. Please try again.",
        });
        // Reset timer text and enable button
        timerElement.textContent = "You can now resend the OTP.";
        timerElement.style.color = "#28a745";
        resendButton.disabled = false;
        resendAllowed = true; // Allow resend again
      }
    });
  </script>
     
</body>
</html>
